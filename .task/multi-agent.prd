______________________________________
[요구사항정의]

멀티에이전트 예시 – “기업 정책 문서에서 액션아이템 도출 & 1페이지 요약 보고서”
현업에서 자주 나오는 요구: “정책/규정 PDF 여러 개를 넣으면, 핵심 요약과 팀별 액션아이템을 자동으로 뽑고, 마지막에 준수 리스크까지 체크한 1페이지 보고서를 만들어줘.”
이를 위해 **Supervisor(조정자)**가 Retriever(검색), Summarizer(요약), ActionMiner(액션 도출), Compliance(준수/리스크 체크), Translator(번역) 에이전트를 그래프(상태머신) 로 오케스트레이션합니다.
________________________________________
[설계01]
핵심 구성(표)
구분	에이전트(노드)	역할	주요 프롬프트/규칙	사용 도구(툴)
1	Retriever	문서에서 근거 문단 검색(RAG)	“질문에 답하는 데 필요한 문단 5개 이내로 반환”	VectorStore(FAISS/PGVector), 파일 로더
2	Summarizer	정책 핵심 10줄 요약	“근거 문단에만 의존, 추측 금지”	LLM
3	ActionMiner	부서별 액션아이템 도출(담당/기한/성격)	“팀 매핑: 보안/개발/운영/준법감시. SMART 규칙 적용”	LLM
4	Compliance	규정 위반/리스크 및 보완책	“규정 조항 ↔ 액션아이템 간 충돌 여부 표기”	LLM
5	Translator	최종 1페이지 보고서를 다국어(ko/en)	“전문 용어 통일, 문체: 비즈니스 보고”	LLM
S	Supervisor	순서/분기 제어, 실패 재시도	“누락 시 해당 노드 재호출, 근거 부족 시 Retriever로 되돌림”	정책 엔진(간단 규칙)
________________________________________
[설계02]
실행 흐름(간단 다이어그램)
[Input: 정책 PDF, 목표/질문]
         |
         v
   (1) Retriever
         |
         v
   (2) Summarizer
         |
         v
   (3) ActionMiner
     |           \
     |            \--[검증 필요?]--> (1) Retriever로 되돌림
     v
   (4) Compliance
         |
         v
   (5) Translator (ko/en)
         |
         v
   [Output: 1페이지 보고서 (요약/액션/리스크/근거링크)]

Supervisor는 각 단계의 상태(State) 를 보고, 근거 부족/형식 불일치 시 조건분기로 이전 노드를 재호출합니다.
________________________________________

[기초소스]
# 최소 개념 예제: 멀티에이전트 그래프

from typing import TypedDict, List, Optional
from langgraph.graph import StateGraph
from langchain_openai import ChatOpenAI

# ---------- 상태(전역 컨텍스트) ----------
class State(TypedDict, total=False):
    query: str
    docs: List[str]            # 검색된 근거 문단
    summary: str               # 정책 10줄 요약
    actions: List[dict]        # [{team, action, due, type, evidence}]
    compliance: str            # 리스크/보완책
    report_ko: str             # 한국어 보고서
    report_en: str             # 영어 보고서
    needs_more_evidence: bool  # 근거 부족 플래그

llm = ChatOpenAI(model="gpt-4o", temperature=0)

# ---------- 각 노드(에이전트) ----------
def retriever_node(state: State) -> State:
    # TODO: 실제 프로젝트에서는 VectorStore 질의로 교체
    fake_docs = [
        "제3조: 개인정보 암호화는 전 구간 의무.",
        "제5조: 접근통제는 RBAC로 최소권한 원칙 적용.",
        "제7조: 로그는 1년 보관, 중요 시스템은 3년.",
    ]
    return {"docs": fake_docs, "needs_more_evidence": False}

def summarizer_node(state: State) -> State:
    prompt = f"""다음 근거만으로 정책 핵심을 10줄 이내로 요약하라.
근거:
{chr(10).join(state.get("docs", []))}
추측 금지."""
    summary = llm.invoke(prompt).content
    # 간단 기준: 요약이 2줄 이하이면 근거 부족으로 재검색
    needs_more = len(summary.splitlines()) < 3
    return {"summary": summary, "needs_more_evidence": needs_more}

def action_node(state: State) -> State:
    prompt = f"""정책 요약을 바탕으로 부서별 액션아이템을 도출하라.
팀: 보안, 개발, 운영, 준법감시. SMART 규칙(구체/측정/달성/현실/기한).
각 항목: team, action, due(YYYY-MM-DD), type(Policy/Process/Tech), evidence(근거조항).
요약:
{state.get("summary","")}
근거:
{chr(10).join(state.get("docs", []))}
JSON 배열로만 출력."""
    actions_json = llm.invoke(prompt).content
    # 실제 코드에선 json.loads(actions_json) 파싱
    return {"actions": [{"team":"보안","action":"DB 암호화 적용 점검","due":"2025-09-30","type":"Tech","evidence":"제3조"}]}

def compliance_node(state: State) -> State:
    prompt = f"""액션아이템과 근거 간 충돌/위험을 점검하고 보완책을 제시하라.
간결하게 요약 보고서 섹션 형태로 작성.
액션:
{state.get("actions")}
근거:
{chr(10).join(state.get("docs", []))}
"""
    compliance = llm.invoke(prompt).content
    return {"compliance": compliance}

def translate_node(state: State) -> State:
    report_ko = f"""[정책 요약]\n{state.get('summary','')}\n\n[액션아이템]\n{state.get('actions')}\n\n[리스크/보완]\n{state.get('compliance','')}"""
    report_en = llm.invoke(f"Translate to English (business report tone):\n{report_ko}").content
    return {"report_ko": report_ko, "report_en": report_en}

# ---------- 그래프 정의 ----------
graph = StateGraph(State)
graph.add_node("retriever", retriever_node)
graph.add_node("summarizer", summarizer_node)
graph.add_node("action", action_node)
graph.add_node("compliance", compliance_node)
graph.add_node("translator", translate_node)

# 기본 흐름
graph.add_edge("retriever", "summarizer")

# 조건 분기: 요약이 부실하면 재검색
def cond_after_summary(state: State) -> str:
    return "retriever" if state.get("needs_more_evidence") else "action"
graph.add_conditional_edges("summarizer", cond_after_summary, {
    "retriever": "retriever",
    "action": "action"
})

graph.add_edge("action", "compliance")
graph.add_edge("compliance", "translator")

app = graph.compile()

# ---------- 실행 ----------
result = app.invoke({"query": "개인정보·접근통제·로그 보관 정책의 핵심과 액션을 1페이지로 정리"})
print("KO REPORT:\n", result["report_ko"][:600], "...")
print("\nEN REPORT:\n", result["report_en"][:600], "...")


-------------------------------
[소스관련]
파일명 : multiagent.py
파일위치 : /app/demo/multiagent
          (multiagent 디렉토리 생성요청)